"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/client/index.js":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/client/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UploadAbortedError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError),\n/* harmony export */   UploadPausedError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generatePermittedFileTypes),\n/* harmony export */   isValidFileSize: () => (/* binding */ isValidFileSize),\n/* harmony export */   isValidFileType: () => (/* binding */ isValidFileType),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Array */ \"(ssr)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Micro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Micro */ \"(ssr)/./node_modules/effect/dist/esm/Micro.js\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var _dist_internal_deferred_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dist/_internal/deferred.js */ \"(ssr)/./node_modules/uploadthing/dist/_internal/deferred.js\");\n/* harmony import */ var _dist_internal_upload_browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dist/_internal/upload-browser.js */ \"(ssr)/./node_modules/uploadthing/dist/_internal/upload-browser.js\");\n/* harmony import */ var _dist_internal_ut_reporter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dist/_internal/ut-reporter.js */ \"(ssr)/./node_modules/uploadthing/dist/_internal/ut-reporter.js\");\n\n\n\n\n\n\n\nvar version$1 = \"7.6.0\";\nconst version = version$1;\n/**\n * Validate that a file is of a valid type given a route config\n * @public\n */ const isValidFileType = (file, routeConfig)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runSync((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.matchFileType)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig)).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map((type)=>file.type.includes(type)), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.orElseSucceed(()=>false)));\n/**\n * Validate that a file is of a valid size given a route config\n * @public\n */ const isValidFileSize = (file, routeConfig)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runSync((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.matchFileType)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig)).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.flatMap((type)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fileSizeToBytes)(routeConfig[type].maxFileSize)), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.map((maxFileSize)=>file.size <= maxFileSize), effect_Micro__WEBPACK_IMPORTED_MODULE_1__.orElseSucceed(()=>false)));\n/**\n * Generate a typed uploader for a given FileRouter\n * @public\n */ const genUploader = (initOpts)=>{\n    const routeRegistry = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.createIdentityProxy)();\n    const controllableUpload = async (slug, opts)=>{\n        const uploads = new Map();\n        const endpoint = typeof slug === \"function\" ? slug(routeRegistry) : slug;\n        const utReporter = (0,_dist_internal_ut_reporter_js__WEBPACK_IMPORTED_MODULE_2__.createUTReporter)({\n            endpoint: String(endpoint),\n            package: initOpts?.package ?? \"uploadthing/client\",\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(initOpts?.url),\n            headers: opts.headers\n        });\n        const fetchFn = initOpts?.fetch ?? window.fetch;\n        const presigneds = await effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromise(utReporter(\"upload\", {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            input: \"input\" in opts ? opts.input : null,\n            files: opts.files.map((f)=>({\n                    name: f.name,\n                    size: f.size,\n                    type: f.type,\n                    lastModified: f.lastModified\n                }))\n        }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, fetchFn)));\n        const totalSize = opts.files.reduce((acc, f)=>acc + f.size, 0);\n        let totalLoaded = 0;\n        const uploadEffect = (file, presigned)=>(0,_dist_internal_upload_browser_js__WEBPACK_IMPORTED_MODULE_3__.uploadFile)(file, presigned, {\n                onUploadProgress: (progressEvent)=>{\n                    totalLoaded += progressEvent.delta;\n                    opts.onUploadProgress?.({\n                        ...progressEvent,\n                        file,\n                        progress: Math.round(progressEvent.loaded / file.size * 100),\n                        totalLoaded,\n                        totalProgress: Math.round(totalLoaded / totalSize * 100)\n                    });\n                }\n            }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, fetchFn));\n        for (const [i, p] of presigneds.entries()){\n            const file = opts.files[i];\n            if (!file) continue;\n            const deferred = (0,_dist_internal_deferred_js__WEBPACK_IMPORTED_MODULE_4__.createDeferred)();\n            uploads.set(file, {\n                deferred,\n                presigned: p\n            });\n            void effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(uploadEffect(file, p), {\n                signal: deferred.ac.signal\n            }).then((result)=>{\n                if (result._tag === \"Success\") {\n                    return deferred.resolve(result.value);\n                } else if (result.cause._tag === \"Interrupt\") {\n                    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError();\n                }\n                throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(result.cause);\n            }).catch((err)=>{\n                if (err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError) return;\n                deferred.reject(err);\n            });\n        }\n        /**\n     * Pause an ongoing upload\n     * @param file The file upload you want to pause. Can be omitted to pause all files\n     */ const pauseUpload = (file)=>{\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_5__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) return;\n                if (upload.deferred.ac.signal.aborted) {\n                    // Cancel the upload if it's already been paused\n                    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError();\n                }\n                upload.deferred.ac.abort();\n            }\n        };\n        /**\n     * Resume a paused upload\n     * @param file The file upload you want to resume. Can be omitted to resume all files\n     */ const resumeUpload = (file)=>{\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_5__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) throw \"No upload found\";\n                upload.deferred.ac = new AbortController();\n                void effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(uploadEffect(file, upload.presigned), {\n                    signal: upload.deferred.ac.signal\n                }).then((result)=>{\n                    if (result._tag === \"Success\") {\n                        return upload.deferred.resolve(result.value);\n                    } else if (result.cause._tag === \"Interrupt\") {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError();\n                    }\n                    throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(result.cause);\n                }).catch((err)=>{\n                    if (err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadPausedError) return;\n                    upload.deferred.reject(err);\n                });\n            }\n        };\n        /**\n     * Wait for an upload to complete\n     * @param file The file upload you want to wait for. Can be omitted to wait for all files\n     */ const done = async (file)=>{\n            const promises = [];\n            const files = effect_Array__WEBPACK_IMPORTED_MODULE_5__.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) throw \"No upload found\";\n                promises.push(upload.deferred.promise);\n            }\n            const results = await Promise.all(promises);\n            return file ? results[0] : results;\n        };\n        return {\n            pauseUpload,\n            resumeUpload,\n            done\n        };\n    };\n    /**\n   * One step upload function that both requests presigned URLs\n   * and then uploads the files to UploadThing\n   */ const typedUploadFiles = (slug, opts)=>{\n        const endpoint = typeof slug === \"function\" ? slug(routeRegistry) : slug;\n        const fetchFn = initOpts?.fetch ?? window.fetch;\n        return (0,_dist_internal_upload_browser_js__WEBPACK_IMPORTED_MODULE_3__.uploadFilesInternal)(endpoint, {\n            ...opts,\n            skipPolling: {},\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(initOpts?.url),\n            package: initOpts?.package ?? \"uploadthing/client\",\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            input: opts.input\n        }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, fetchFn), (effect)=>effect_Micro__WEBPACK_IMPORTED_MODULE_1__.runPromiseExit(effect, opts.signal && {\n                signal: opts.signal\n            })).then((exit)=>{\n            if (exit._tag === \"Success\") {\n                return exit.value;\n            } else if (exit.cause._tag === \"Interrupt\") {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadAbortedError();\n            }\n            throw effect_Micro__WEBPACK_IMPORTED_MODULE_1__.causeSquash(exit.cause);\n        });\n    };\n    return {\n        uploadFiles: typedUploadFiles,\n        createUpload: controllableUpload,\n        /**\n     * Identity object that can be used instead of raw strings\n     * that allows \"Go to definition\" in your IDE to bring you\n     * to the backend definition of a route.\n     */ routeRegistry\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/_internal/deferred.js":
/*!*************************************************************!*\
  !*** ./node_modules/uploadthing/dist/_internal/deferred.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeferred: () => (/* binding */ createDeferred)\n/* harmony export */ });\nconst createDeferred = ()=>{\n    let resolve;\n    let reject;\n    const ac = new AbortController();\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        ac,\n        resolve,\n        reject\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9faW50ZXJuYWwvZGVmZXJyZWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGlCQUFpQjtJQUNuQixJQUFJQztJQUNKLElBQUlDO0lBQ0osTUFBTUMsS0FBSyxJQUFJQztJQUNmLE1BQU1DLFVBQVUsSUFBSUMsUUFBUSxDQUFDQyxLQUFLQztRQUM5QlAsVUFBVU07UUFDVkwsU0FBU007SUFDYjtJQUNBLE9BQU87UUFDSEg7UUFDQUY7UUFDQUY7UUFDQUM7SUFDSjtBQUNKO0FBRTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHdpc3RlZC1jYW50aW5hLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvX2ludGVybmFsL2RlZmVycmVkLmpzP2FkZDUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JlYXRlRGVmZXJyZWQgPSAoKT0+e1xuICAgIGxldCByZXNvbHZlO1xuICAgIGxldCByZWplY3Q7XG4gICAgY29uc3QgYWMgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMsIHJlaik9PntcbiAgICAgICAgcmVzb2x2ZSA9IHJlcztcbiAgICAgICAgcmVqZWN0ID0gcmVqO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2UsXG4gICAgICAgIGFjLFxuICAgICAgICByZXNvbHZlLFxuICAgICAgICByZWplY3RcbiAgICB9O1xufTtcblxuZXhwb3J0IHsgY3JlYXRlRGVmZXJyZWQgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVEZWZlcnJlZCIsInJlc29sdmUiLCJyZWplY3QiLCJhYyIsIkFib3J0Q29udHJvbGxlciIsInByb21pc2UiLCJQcm9taXNlIiwicmVzIiwicmVqIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/_internal/deferred.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/_internal/deprecations.js":
/*!*****************************************************************!*\
  !*** ./node_modules/uploadthing/dist/_internal/deprecations.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logDeprecationWarning: () => (/* binding */ logDeprecationWarning)\n/* harmony export */ });\nconst logDeprecationWarning = (message)=>{\n    // eslint-disable-next-line no-console\n    console.warn(`⚠️ [uploadthing][deprecated] ${message}`);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9faW50ZXJuYWwvZGVwcmVjYXRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSx3QkFBd0IsQ0FBQ0M7SUFDM0Isc0NBQXNDO0lBQ3RDQyxRQUFRQyxJQUFJLENBQUMsQ0FBQyw2QkFBNkIsRUFBRUYsUUFBUSxDQUFDO0FBQzFEO0FBRWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHdpc3RlZC1jYW50aW5hLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvX2ludGVybmFsL2RlcHJlY2F0aW9ucy5qcz9mMzQ2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZ0RlcHJlY2F0aW9uV2FybmluZyA9IChtZXNzYWdlKT0+e1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGDimqDvuI8gW3VwbG9hZHRoaW5nXVtkZXByZWNhdGVkXSAke21lc3NhZ2V9YCk7XG59O1xuXG5leHBvcnQgeyBsb2dEZXByZWNhdGlvbldhcm5pbmcgfTtcbiJdLCJuYW1lcyI6WyJsb2dEZXByZWNhdGlvbldhcm5pbmciLCJtZXNzYWdlIiwiY29uc29sZSIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/_internal/deprecations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/_internal/upload-browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/uploadthing/dist/_internal/upload-browser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uploadFile: () => (/* binding */ uploadFile),\n/* harmony export */   uploadFilesInternal: () => (/* binding */ uploadFilesInternal)\n/* harmony export */ });\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Function */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_Micro__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Micro */ \"(ssr)/./node_modules/effect/dist/esm/Micro.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Predicate */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var _deprecations_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deprecations.js */ \"(ssr)/./node_modules/uploadthing/dist/_internal/deprecations.js\");\n/* harmony import */ var _ut_reporter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ut-reporter.js */ \"(ssr)/./node_modules/uploadthing/dist/_internal/ut-reporter.js\");\n\n\n\n\n\n\nvar version = \"7.6.0\";\nconst uploadWithProgress = (file, rangeStart, presigned, onUploadProgress)=>effect_Micro__WEBPACK_IMPORTED_MODULE_0__.async((resume)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", presigned.url, true);\n        xhr.setRequestHeader(\"Range\", `bytes=${rangeStart}-`);\n        xhr.setRequestHeader(\"x-uploadthing-version\", version);\n        xhr.responseType = \"json\";\n        let previousLoaded = 0;\n        xhr.upload.addEventListener(\"progress\", ({ loaded })=>{\n            const delta = loaded - previousLoaded;\n            onUploadProgress?.({\n                loaded,\n                delta\n            });\n            previousLoaded = loaded;\n        });\n        xhr.addEventListener(\"load\", ()=>{\n            if (xhr.status >= 200 && xhr.status < 300 && (0,effect_Predicate__WEBPACK_IMPORTED_MODULE_1__.isRecord)(xhr.response)) {\n                if ((0,effect_Predicate__WEBPACK_IMPORTED_MODULE_1__.hasProperty)(xhr.response, \"error\")) {\n                    resume(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                        code: \"UPLOAD_FAILED\",\n                        message: String(xhr.response.error),\n                        data: xhr.response\n                    }));\n                } else {\n                    resume(effect_Micro__WEBPACK_IMPORTED_MODULE_0__.succeed(xhr.response));\n                }\n            } else {\n                resume(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: \"UPLOAD_FAILED\",\n                    message: `XHR failed ${xhr.status} ${xhr.statusText}`,\n                    data: xhr.response\n                }));\n            }\n        });\n        // Is there a case when the client would throw and\n        // ingest server not knowing about it? idts?\n        xhr.addEventListener(\"error\", ()=>{\n            resume(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"UPLOAD_FAILED\"\n            }));\n        });\n        const formData = new FormData();\n        /**\n     * iOS/React Native FormData handling requires special attention:\n     *\n     * Issue: In React Native, iOS crashes with \"attempt to insert nil object\" when appending File directly\n     * to FormData. This happens because iOS tries to create NSDictionary from the file object and expects\n     * specific structure {uri, type, name}.\n     *\n     *\n     * Note: Don't try to use Blob or modify File object - iOS specifically needs plain object\n     * with these properties to create valid NSDictionary.\n     */ if (\"uri\" in file) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            formData.append(\"file\", {\n                uri: file.uri,\n                type: file.type,\n                name: file.name,\n                ...rangeStart > 0 && {\n                    range: rangeStart\n                }\n            });\n        } else {\n            formData.append(\"file\", rangeStart > 0 ? file.slice(rangeStart) : file);\n        }\n        xhr.send(formData);\n        return effect_Micro__WEBPACK_IMPORTED_MODULE_0__.sync(()=>xhr.abort());\n    });\nconst uploadFile = (file, presigned, opts)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.fetchEff)(presigned.url, {\n        method: \"HEAD\"\n    }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_0__.map(({ headers })=>parseInt(headers.get(\"x-ut-range-start\") ?? \"0\", 10)), effect_Micro__WEBPACK_IMPORTED_MODULE_0__.tap((start)=>opts.onUploadProgress?.({\n            delta: start,\n            loaded: start\n        })), effect_Micro__WEBPACK_IMPORTED_MODULE_0__.flatMap((start)=>uploadWithProgress(file, start, presigned, (progressEvent)=>opts.onUploadProgress?.({\n                delta: progressEvent.delta,\n                loaded: progressEvent.loaded + start\n            }))), effect_Micro__WEBPACK_IMPORTED_MODULE_0__.map(effect_Function__WEBPACK_IMPORTED_MODULE_3__.unsafeCoerce), effect_Micro__WEBPACK_IMPORTED_MODULE_0__.map((uploadResponse)=>({\n            name: file.name,\n            size: file.size,\n            key: presigned.key,\n            lastModified: file.lastModified,\n            serverData: uploadResponse.serverData,\n            get url () {\n                (0,_deprecations_js__WEBPACK_IMPORTED_MODULE_4__.logDeprecationWarning)(\"`file.url` is deprecated and will be removed in uploadthing v9. Use `file.ufsUrl` instead.\");\n                return uploadResponse.url;\n            },\n            get appUrl () {\n                (0,_deprecations_js__WEBPACK_IMPORTED_MODULE_4__.logDeprecationWarning)(\"`file.appUrl` is deprecated and will be removed in uploadthing v9. Use `file.ufsUrl` instead.\");\n                return uploadResponse.appUrl;\n            },\n            ufsUrl: uploadResponse.ufsUrl,\n            customId: presigned.customId,\n            type: file.type,\n            fileHash: uploadResponse.fileHash\n        })));\nconst uploadFilesInternal = (endpoint, opts)=>{\n    // classic service right here\n    const reportEventToUT = (0,_ut_reporter_js__WEBPACK_IMPORTED_MODULE_5__.createUTReporter)({\n        endpoint: String(endpoint),\n        package: opts.package,\n        url: opts.url,\n        headers: opts.headers\n    });\n    const totalSize = opts.files.reduce((acc, f)=>acc + f.size, 0);\n    let totalLoaded = 0;\n    return effect_Micro__WEBPACK_IMPORTED_MODULE_0__.flatMap(reportEventToUT(\"upload\", {\n        input: \"input\" in opts ? opts.input : null,\n        files: opts.files.map((f)=>({\n                name: f.name,\n                size: f.size,\n                type: f.type,\n                lastModified: f.lastModified\n            }))\n    }), (presigneds)=>effect_Micro__WEBPACK_IMPORTED_MODULE_0__.forEach(presigneds, (presigned, i)=>effect_Micro__WEBPACK_IMPORTED_MODULE_0__.flatMap(effect_Micro__WEBPACK_IMPORTED_MODULE_0__.sync(()=>opts.onUploadBegin?.({\n                    file: opts.files[i].name\n                })), ()=>uploadFile(opts.files[i], presigned, {\n                    onUploadProgress: (ev)=>{\n                        totalLoaded += ev.delta;\n                        opts.onUploadProgress?.({\n                            file: opts.files[i],\n                            progress: ev.loaded / opts.files[i].size * 100,\n                            loaded: ev.loaded,\n                            delta: ev.delta,\n                            totalLoaded,\n                            totalProgress: totalLoaded / totalSize\n                        });\n                    }\n                })), {\n            concurrency: 6\n        }));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/_internal/upload-browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/_internal/ut-reporter.js":
/*!****************************************************************!*\
  !*** ./node_modules/uploadthing/dist/_internal/ut-reporter.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUTReporter: () => (/* binding */ createUTReporter)\n/* harmony export */ });\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! effect/Function */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_Micro__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Micro */ \"(ssr)/./node_modules/effect/dist/esm/Micro.js\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.js\");\n\n\n\nvar version = \"7.6.0\";\nconst createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\n/**\n * Creates a \"client\" for reporting events to the UploadThing server via the user's API endpoint.\n * Events are handled in \"./handler.ts starting at L112\"\n */ const createUTReporter = (cfg)=>(type, payload)=>effect_Micro__WEBPACK_IMPORTED_MODULE_0__.gen(function*() {\n            const url = createAPIRequestUrl({\n                url: cfg.url,\n                slug: cfg.endpoint,\n                actionType: type\n            });\n            const headers = new Headers((yield* effect_Micro__WEBPACK_IMPORTED_MODULE_0__.promise(async ()=>typeof cfg.headers === \"function\" ? await cfg.headers() : cfg.headers)));\n            headers.set(\"x-uploadthing-package\", cfg.package);\n            headers.set(\"x-uploadthing-version\", version);\n            headers.set(\"Content-Type\", \"application/json\");\n            const response = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fetchEff)(url, {\n                method: \"POST\",\n                body: JSON.stringify(payload),\n                headers\n            }).pipe(effect_Micro__WEBPACK_IMPORTED_MODULE_0__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.parseResponseJson), /**\n         * We don't _need_ to validate the response here, just cast it for now.\n         * As of now, @effect/schema includes quite a few bytes we cut out by this...\n         * We have \"strong typing\" on the backend that ensures the shape should match.\n         */ effect_Micro__WEBPACK_IMPORTED_MODULE_0__.map(effect_Function__WEBPACK_IMPORTED_MODULE_2__.unsafeCoerce), effect_Micro__WEBPACK_IMPORTED_MODULE_0__.catchTag(\"FetchError\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_0__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: `Failed to report event \"${type}\" to UploadThing server`,\n                    cause: e\n                }))), effect_Micro__WEBPACK_IMPORTED_MODULE_0__.catchTag(\"BadRequestError\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_0__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                    code: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getErrorTypeFromStatusCode)(e.status),\n                    message: e.getMessage(),\n                    cause: e.json\n                }))), effect_Micro__WEBPACK_IMPORTED_MODULE_0__.catchTag(\"InvalidJson\", (e)=>effect_Micro__WEBPACK_IMPORTED_MODULE_0__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: \"Failed to parse response from UploadThing server\",\n                    cause: e\n                }))));\n            return response;\n        });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9faW50ZXJuYWwvdXQtcmVwb3J0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQztBQUNUO0FBQzBFO0FBRWhILElBQUlNLFVBQVU7QUFFZCxNQUFNQyxzQkFBc0IsQ0FBQ0M7SUFDekIsTUFBTUMsTUFBTSxJQUFJQyxJQUFJRixPQUFPQyxHQUFHO0lBQzlCLE1BQU1FLGNBQWMsSUFBSUMsZ0JBQWdCSCxJQUFJSSxNQUFNO0lBQ2xERixZQUFZRyxHQUFHLENBQUMsY0FBY04sT0FBT08sVUFBVTtJQUMvQ0osWUFBWUcsR0FBRyxDQUFDLFFBQVFOLE9BQU9RLElBQUk7SUFDbkNQLElBQUlJLE1BQU0sR0FBR0YsWUFBWU0sUUFBUTtJQUNqQyxPQUFPUjtBQUNYO0FBQ0E7OztDQUdDLEdBQUcsTUFBTVMsbUJBQW1CLENBQUNDLE1BQU0sQ0FBQ0MsTUFBTUMsVUFBVXBCLDZDQUFTLENBQUM7WUFDbkQsTUFBTVEsTUFBTUYsb0JBQW9CO2dCQUM1QkUsS0FBS1UsSUFBSVYsR0FBRztnQkFDWk8sTUFBTUcsSUFBSUksUUFBUTtnQkFDbEJSLFlBQVlLO1lBQ2hCO1lBQ0EsTUFBTUksVUFBVSxJQUFJQyxRQUFTLFFBQU94QixpREFBYSxDQUFDLFVBQVUsT0FBT2tCLElBQUlLLE9BQU8sS0FBSyxhQUFhLE1BQU1MLElBQUlLLE9BQU8sS0FBS0wsSUFBSUssT0FBTztZQUNqSUEsUUFBUVYsR0FBRyxDQUFDLHlCQUF5QkssSUFBSVEsT0FBTztZQUNoREgsUUFBUVYsR0FBRyxDQUFDLHlCQUF5QlI7WUFDckNrQixRQUFRVixHQUFHLENBQUMsZ0JBQWdCO1lBQzVCLE1BQU1jLFdBQVcsT0FBTzFCLDZEQUFRQSxDQUFDTyxLQUFLO2dCQUNsQ29CLFFBQVE7Z0JBQ1JDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1g7Z0JBQ3JCRztZQUNKLEdBQUdTLElBQUksQ0FBQ2hDLGlEQUFhLENBQUNFLGtFQUFpQkEsR0FBRzs7OztTQUk3QyxHQUFHRiw2Q0FBUyxDQUFDRCx5REFBWUEsR0FBR0Msa0RBQWMsQ0FBQyxjQUFjLENBQUNvQyxJQUFJcEMsOENBQVUsQ0FBQyxJQUFJRyxpRUFBZ0JBLENBQUM7b0JBQ25GbUMsTUFBTTtvQkFDTkMsU0FBUyxDQUFDLHdCQUF3QixFQUFFcEIsS0FBSyx1QkFBdUIsQ0FBQztvQkFDakVxQixPQUFPSjtnQkFDWCxNQUFNcEMsa0RBQWMsQ0FBQyxtQkFBbUIsQ0FBQ29DLElBQUlwQyw4Q0FBVSxDQUFDLElBQUlHLGlFQUFnQkEsQ0FBQztvQkFDekVtQyxNQUFNbEMsK0VBQTBCQSxDQUFDZ0MsRUFBRUssTUFBTTtvQkFDekNGLFNBQVNILEVBQUVNLFVBQVU7b0JBQ3JCRixPQUFPSixFQUFFTyxJQUFJO2dCQUNqQixNQUFNM0Msa0RBQWMsQ0FBQyxlQUFlLENBQUNvQyxJQUFJcEMsOENBQVUsQ0FBQyxJQUFJRyxpRUFBZ0JBLENBQUM7b0JBQ3JFbUMsTUFBTTtvQkFDTkMsU0FBUztvQkFDVEMsT0FBT0o7Z0JBQ1g7WUFDSixPQUFPVDtRQUNYO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHdpc3RlZC1jYW50aW5hLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvX2ludGVybmFsL3V0LXJlcG9ydGVyLmpzP2Q5YTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5zYWZlQ29lcmNlIH0gZnJvbSAnZWZmZWN0L0Z1bmN0aW9uJztcbmltcG9ydCAqIGFzIE1pY3JvIGZyb20gJ2VmZmVjdC9NaWNybyc7XG5pbXBvcnQgeyBmZXRjaEVmZiwgcGFyc2VSZXNwb25zZUpzb24sIFVwbG9hZFRoaW5nRXJyb3IsIGdldEVycm9yVHlwZUZyb21TdGF0dXNDb2RlIH0gZnJvbSAnQHVwbG9hZHRoaW5nL3NoYXJlZCc7XG5cbnZhciB2ZXJzaW9uID0gXCI3LjYuMFwiO1xuXG5jb25zdCBjcmVhdGVBUElSZXF1ZXN0VXJsID0gKGNvbmZpZyk9PntcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGNvbmZpZy51cmwpO1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh1cmwuc2VhcmNoKTtcbiAgICBxdWVyeVBhcmFtcy5zZXQoXCJhY3Rpb25UeXBlXCIsIGNvbmZpZy5hY3Rpb25UeXBlKTtcbiAgICBxdWVyeVBhcmFtcy5zZXQoXCJzbHVnXCIsIGNvbmZpZy5zbHVnKTtcbiAgICB1cmwuc2VhcmNoID0gcXVlcnlQYXJhbXMudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gdXJsO1xufTtcbi8qKlxuICogQ3JlYXRlcyBhIFwiY2xpZW50XCIgZm9yIHJlcG9ydGluZyBldmVudHMgdG8gdGhlIFVwbG9hZFRoaW5nIHNlcnZlciB2aWEgdGhlIHVzZXIncyBBUEkgZW5kcG9pbnQuXG4gKiBFdmVudHMgYXJlIGhhbmRsZWQgaW4gXCIuL2hhbmRsZXIudHMgc3RhcnRpbmcgYXQgTDExMlwiXG4gKi8gY29uc3QgY3JlYXRlVVRSZXBvcnRlciA9IChjZmcpPT4odHlwZSwgcGF5bG9hZCk9Pk1pY3JvLmdlbihmdW5jdGlvbiooKSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBjcmVhdGVBUElSZXF1ZXN0VXJsKHtcbiAgICAgICAgICAgICAgICB1cmw6IGNmZy51cmwsXG4gICAgICAgICAgICAgICAgc2x1ZzogY2ZnLmVuZHBvaW50LFxuICAgICAgICAgICAgICAgIGFjdGlvblR5cGU6IHR5cGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCh5aWVsZCogTWljcm8ucHJvbWlzZShhc3luYyAoKT0+dHlwZW9mIGNmZy5oZWFkZXJzID09PSBcImZ1bmN0aW9uXCIgPyBhd2FpdCBjZmcuaGVhZGVycygpIDogY2ZnLmhlYWRlcnMpKSk7XG4gICAgICAgICAgICBoZWFkZXJzLnNldChcIngtdXBsb2FkdGhpbmctcGFja2FnZVwiLCBjZmcucGFja2FnZSk7XG4gICAgICAgICAgICBoZWFkZXJzLnNldChcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiLCB2ZXJzaW9uKTtcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQqIGZldGNoRWZmKHVybCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCksXG4gICAgICAgICAgICAgICAgaGVhZGVyc1xuICAgICAgICAgICAgfSkucGlwZShNaWNyby5hbmRUaGVuKHBhcnNlUmVzcG9uc2VKc29uKSwgLyoqXG4gICAgICAgICAqIFdlIGRvbid0IF9uZWVkXyB0byB2YWxpZGF0ZSB0aGUgcmVzcG9uc2UgaGVyZSwganVzdCBjYXN0IGl0IGZvciBub3cuXG4gICAgICAgICAqIEFzIG9mIG5vdywgQGVmZmVjdC9zY2hlbWEgaW5jbHVkZXMgcXVpdGUgYSBmZXcgYnl0ZXMgd2UgY3V0IG91dCBieSB0aGlzLi4uXG4gICAgICAgICAqIFdlIGhhdmUgXCJzdHJvbmcgdHlwaW5nXCIgb24gdGhlIGJhY2tlbmQgdGhhdCBlbnN1cmVzIHRoZSBzaGFwZSBzaG91bGQgbWF0Y2guXG4gICAgICAgICAqLyBNaWNyby5tYXAodW5zYWZlQ29lcmNlKSwgTWljcm8uY2F0Y2hUYWcoXCJGZXRjaEVycm9yXCIsIChlKT0+TWljcm8uZmFpbChuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFwiSU5URVJOQUxfQ0xJRU5UX0VSUk9SXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gcmVwb3J0IGV2ZW50IFwiJHt0eXBlfVwiIHRvIFVwbG9hZFRoaW5nIHNlcnZlcmAsXG4gICAgICAgICAgICAgICAgICAgIGNhdXNlOiBlXG4gICAgICAgICAgICAgICAgfSkpKSwgTWljcm8uY2F0Y2hUYWcoXCJCYWRSZXF1ZXN0RXJyb3JcIiwgKGUpPT5NaWNyby5mYWlsKG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogZ2V0RXJyb3JUeXBlRnJvbVN0YXR1c0NvZGUoZS5zdGF0dXMpLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlLmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgY2F1c2U6IGUuanNvblxuICAgICAgICAgICAgICAgIH0pKSksIE1pY3JvLmNhdGNoVGFnKFwiSW52YWxpZEpzb25cIiwgKGUpPT5NaWNyby5mYWlsKG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogXCJJTlRFUk5BTF9DTElFTlRfRVJST1JcIixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gcGFyc2UgcmVzcG9uc2UgZnJvbSBVcGxvYWRUaGluZyBzZXJ2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgY2F1c2U6IGVcbiAgICAgICAgICAgICAgICB9KSkpKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSk7XG5cbmV4cG9ydCB7IGNyZWF0ZVVUUmVwb3J0ZXIgfTtcbiJdLCJuYW1lcyI6WyJ1bnNhZmVDb2VyY2UiLCJNaWNybyIsImZldGNoRWZmIiwicGFyc2VSZXNwb25zZUpzb24iLCJVcGxvYWRUaGluZ0Vycm9yIiwiZ2V0RXJyb3JUeXBlRnJvbVN0YXR1c0NvZGUiLCJ2ZXJzaW9uIiwiY3JlYXRlQVBJUmVxdWVzdFVybCIsImNvbmZpZyIsInVybCIsIlVSTCIsInF1ZXJ5UGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwic2VhcmNoIiwic2V0IiwiYWN0aW9uVHlwZSIsInNsdWciLCJ0b1N0cmluZyIsImNyZWF0ZVVUUmVwb3J0ZXIiLCJjZmciLCJ0eXBlIiwicGF5bG9hZCIsImdlbiIsImVuZHBvaW50IiwiaGVhZGVycyIsIkhlYWRlcnMiLCJwcm9taXNlIiwicGFja2FnZSIsInJlc3BvbnNlIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwaXBlIiwiYW5kVGhlbiIsIm1hcCIsImNhdGNoVGFnIiwiZSIsImZhaWwiLCJjb2RlIiwibWVzc2FnZSIsImNhdXNlIiwic3RhdHVzIiwiZ2V0TWVzc2FnZSIsImpzb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/_internal/ut-reporter.js\n");

/***/ })

};
;