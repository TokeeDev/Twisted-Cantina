"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sqids";
exports.ids = ["vendor-chunks/sqids"];
exports.modules = {

/***/ "(ssr)/./node_modules/sqids/esm/sqids.js":
/*!*****************************************!*\
  !*** ./node_modules/sqids/esm/sqids.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Sqids),\n/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions)\n/* harmony export */ });\nconst defaultOptions = {\n    alphabet: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n    minLength: 0,\n    blocklist: new Set([\n        \"0rgasm\",\n        \"1d10t\",\n        \"1d1ot\",\n        \"1di0t\",\n        \"1diot\",\n        \"1eccacu10\",\n        \"1eccacu1o\",\n        \"1eccacul0\",\n        \"1eccaculo\",\n        \"1mbec11e\",\n        \"1mbec1le\",\n        \"1mbeci1e\",\n        \"1mbecile\",\n        \"a11upat0\",\n        \"a11upato\",\n        \"a1lupat0\",\n        \"a1lupato\",\n        \"aand\",\n        \"ah01e\",\n        \"ah0le\",\n        \"aho1e\",\n        \"ahole\",\n        \"al1upat0\",\n        \"al1upato\",\n        \"allupat0\",\n        \"allupato\",\n        \"ana1\",\n        \"ana1e\",\n        \"anal\",\n        \"anale\",\n        \"anus\",\n        \"arrapat0\",\n        \"arrapato\",\n        \"arsch\",\n        \"arse\",\n        \"ass\",\n        \"b00b\",\n        \"b00be\",\n        \"b01ata\",\n        \"b0ceta\",\n        \"b0iata\",\n        \"b0ob\",\n        \"b0obe\",\n        \"b0sta\",\n        \"b1tch\",\n        \"b1te\",\n        \"b1tte\",\n        \"ba1atkar\",\n        \"balatkar\",\n        \"bastard0\",\n        \"bastardo\",\n        \"batt0na\",\n        \"battona\",\n        \"bitch\",\n        \"bite\",\n        \"bitte\",\n        \"bo0b\",\n        \"bo0be\",\n        \"bo1ata\",\n        \"boceta\",\n        \"boiata\",\n        \"boob\",\n        \"boobe\",\n        \"bosta\",\n        \"bran1age\",\n        \"bran1er\",\n        \"bran1ette\",\n        \"bran1eur\",\n        \"bran1euse\",\n        \"branlage\",\n        \"branler\",\n        \"branlette\",\n        \"branleur\",\n        \"branleuse\",\n        \"c0ck\",\n        \"c0g110ne\",\n        \"c0g11one\",\n        \"c0g1i0ne\",\n        \"c0g1ione\",\n        \"c0gl10ne\",\n        \"c0gl1one\",\n        \"c0gli0ne\",\n        \"c0glione\",\n        \"c0na\",\n        \"c0nnard\",\n        \"c0nnasse\",\n        \"c0nne\",\n        \"c0u111es\",\n        \"c0u11les\",\n        \"c0u1l1es\",\n        \"c0u1lles\",\n        \"c0ui11es\",\n        \"c0ui1les\",\n        \"c0uil1es\",\n        \"c0uilles\",\n        \"c11t\",\n        \"c11t0\",\n        \"c11to\",\n        \"c1it\",\n        \"c1it0\",\n        \"c1ito\",\n        \"cabr0n\",\n        \"cabra0\",\n        \"cabrao\",\n        \"cabron\",\n        \"caca\",\n        \"cacca\",\n        \"cacete\",\n        \"cagante\",\n        \"cagar\",\n        \"cagare\",\n        \"cagna\",\n        \"cara1h0\",\n        \"cara1ho\",\n        \"caracu10\",\n        \"caracu1o\",\n        \"caracul0\",\n        \"caraculo\",\n        \"caralh0\",\n        \"caralho\",\n        \"cazz0\",\n        \"cazz1mma\",\n        \"cazzata\",\n        \"cazzimma\",\n        \"cazzo\",\n        \"ch00t1a\",\n        \"ch00t1ya\",\n        \"ch00tia\",\n        \"ch00tiya\",\n        \"ch0d\",\n        \"ch0ot1a\",\n        \"ch0ot1ya\",\n        \"ch0otia\",\n        \"ch0otiya\",\n        \"ch1asse\",\n        \"ch1avata\",\n        \"ch1er\",\n        \"ch1ng0\",\n        \"ch1ngadaz0s\",\n        \"ch1ngadazos\",\n        \"ch1ngader1ta\",\n        \"ch1ngaderita\",\n        \"ch1ngar\",\n        \"ch1ngo\",\n        \"ch1ngues\",\n        \"ch1nk\",\n        \"chatte\",\n        \"chiasse\",\n        \"chiavata\",\n        \"chier\",\n        \"ching0\",\n        \"chingadaz0s\",\n        \"chingadazos\",\n        \"chingader1ta\",\n        \"chingaderita\",\n        \"chingar\",\n        \"chingo\",\n        \"chingues\",\n        \"chink\",\n        \"cho0t1a\",\n        \"cho0t1ya\",\n        \"cho0tia\",\n        \"cho0tiya\",\n        \"chod\",\n        \"choot1a\",\n        \"choot1ya\",\n        \"chootia\",\n        \"chootiya\",\n        \"cl1t\",\n        \"cl1t0\",\n        \"cl1to\",\n        \"clit\",\n        \"clit0\",\n        \"clito\",\n        \"cock\",\n        \"cog110ne\",\n        \"cog11one\",\n        \"cog1i0ne\",\n        \"cog1ione\",\n        \"cogl10ne\",\n        \"cogl1one\",\n        \"cogli0ne\",\n        \"coglione\",\n        \"cona\",\n        \"connard\",\n        \"connasse\",\n        \"conne\",\n        \"cou111es\",\n        \"cou11les\",\n        \"cou1l1es\",\n        \"cou1lles\",\n        \"coui11es\",\n        \"coui1les\",\n        \"couil1es\",\n        \"couilles\",\n        \"cracker\",\n        \"crap\",\n        \"cu10\",\n        \"cu1att0ne\",\n        \"cu1attone\",\n        \"cu1er0\",\n        \"cu1ero\",\n        \"cu1o\",\n        \"cul0\",\n        \"culatt0ne\",\n        \"culattone\",\n        \"culer0\",\n        \"culero\",\n        \"culo\",\n        \"cum\",\n        \"cunt\",\n        \"d11d0\",\n        \"d11do\",\n        \"d1ck\",\n        \"d1ld0\",\n        \"d1ldo\",\n        \"damn\",\n        \"de1ch\",\n        \"deich\",\n        \"depp\",\n        \"di1d0\",\n        \"di1do\",\n        \"dick\",\n        \"dild0\",\n        \"dildo\",\n        \"dyke\",\n        \"encu1e\",\n        \"encule\",\n        \"enema\",\n        \"enf01re\",\n        \"enf0ire\",\n        \"enfo1re\",\n        \"enfoire\",\n        \"estup1d0\",\n        \"estup1do\",\n        \"estupid0\",\n        \"estupido\",\n        \"etr0n\",\n        \"etron\",\n        \"f0da\",\n        \"f0der\",\n        \"f0ttere\",\n        \"f0tters1\",\n        \"f0ttersi\",\n        \"f0tze\",\n        \"f0utre\",\n        \"f1ca\",\n        \"f1cker\",\n        \"f1ga\",\n        \"fag\",\n        \"fica\",\n        \"ficker\",\n        \"figa\",\n        \"foda\",\n        \"foder\",\n        \"fottere\",\n        \"fotters1\",\n        \"fottersi\",\n        \"fotze\",\n        \"foutre\",\n        \"fr0c10\",\n        \"fr0c1o\",\n        \"fr0ci0\",\n        \"fr0cio\",\n        \"fr0sc10\",\n        \"fr0sc1o\",\n        \"fr0sci0\",\n        \"fr0scio\",\n        \"froc10\",\n        \"froc1o\",\n        \"froci0\",\n        \"frocio\",\n        \"frosc10\",\n        \"frosc1o\",\n        \"frosci0\",\n        \"froscio\",\n        \"fuck\",\n        \"g00\",\n        \"g0o\",\n        \"g0u1ne\",\n        \"g0uine\",\n        \"gandu\",\n        \"go0\",\n        \"goo\",\n        \"gou1ne\",\n        \"gouine\",\n        \"gr0gnasse\",\n        \"grognasse\",\n        \"haram1\",\n        \"harami\",\n        \"haramzade\",\n        \"hund1n\",\n        \"hundin\",\n        \"id10t\",\n        \"id1ot\",\n        \"idi0t\",\n        \"idiot\",\n        \"imbec11e\",\n        \"imbec1le\",\n        \"imbeci1e\",\n        \"imbecile\",\n        \"j1zz\",\n        \"jerk\",\n        \"jizz\",\n        \"k1ke\",\n        \"kam1ne\",\n        \"kamine\",\n        \"kike\",\n        \"leccacu10\",\n        \"leccacu1o\",\n        \"leccacul0\",\n        \"leccaculo\",\n        \"m1erda\",\n        \"m1gn0tta\",\n        \"m1gnotta\",\n        \"m1nch1a\",\n        \"m1nchia\",\n        \"m1st\",\n        \"mam0n\",\n        \"mamahuev0\",\n        \"mamahuevo\",\n        \"mamon\",\n        \"masturbat10n\",\n        \"masturbat1on\",\n        \"masturbate\",\n        \"masturbati0n\",\n        \"masturbation\",\n        \"merd0s0\",\n        \"merd0so\",\n        \"merda\",\n        \"merde\",\n        \"merdos0\",\n        \"merdoso\",\n        \"mierda\",\n        \"mign0tta\",\n        \"mignotta\",\n        \"minch1a\",\n        \"minchia\",\n        \"mist\",\n        \"musch1\",\n        \"muschi\",\n        \"n1gger\",\n        \"neger\",\n        \"negr0\",\n        \"negre\",\n        \"negro\",\n        \"nerch1a\",\n        \"nerchia\",\n        \"nigger\",\n        \"orgasm\",\n        \"p00p\",\n        \"p011a\",\n        \"p01la\",\n        \"p0l1a\",\n        \"p0lla\",\n        \"p0mp1n0\",\n        \"p0mp1no\",\n        \"p0mpin0\",\n        \"p0mpino\",\n        \"p0op\",\n        \"p0rca\",\n        \"p0rn\",\n        \"p0rra\",\n        \"p0uff1asse\",\n        \"p0uffiasse\",\n        \"p1p1\",\n        \"p1pi\",\n        \"p1r1a\",\n        \"p1rla\",\n        \"p1sc10\",\n        \"p1sc1o\",\n        \"p1sci0\",\n        \"p1scio\",\n        \"p1sser\",\n        \"pa11e\",\n        \"pa1le\",\n        \"pal1e\",\n        \"palle\",\n        \"pane1e1r0\",\n        \"pane1e1ro\",\n        \"pane1eir0\",\n        \"pane1eiro\",\n        \"panele1r0\",\n        \"panele1ro\",\n        \"paneleir0\",\n        \"paneleiro\",\n        \"patakha\",\n        \"pec0r1na\",\n        \"pec0rina\",\n        \"pecor1na\",\n        \"pecorina\",\n        \"pen1s\",\n        \"pendej0\",\n        \"pendejo\",\n        \"penis\",\n        \"pip1\",\n        \"pipi\",\n        \"pir1a\",\n        \"pirla\",\n        \"pisc10\",\n        \"pisc1o\",\n        \"pisci0\",\n        \"piscio\",\n        \"pisser\",\n        \"po0p\",\n        \"po11a\",\n        \"po1la\",\n        \"pol1a\",\n        \"polla\",\n        \"pomp1n0\",\n        \"pomp1no\",\n        \"pompin0\",\n        \"pompino\",\n        \"poop\",\n        \"porca\",\n        \"porn\",\n        \"porra\",\n        \"pouff1asse\",\n        \"pouffiasse\",\n        \"pr1ck\",\n        \"prick\",\n        \"pussy\",\n        \"put1za\",\n        \"puta\",\n        \"puta1n\",\n        \"putain\",\n        \"pute\",\n        \"putiza\",\n        \"puttana\",\n        \"queca\",\n        \"r0mp1ba11e\",\n        \"r0mp1ba1le\",\n        \"r0mp1bal1e\",\n        \"r0mp1balle\",\n        \"r0mpiba11e\",\n        \"r0mpiba1le\",\n        \"r0mpibal1e\",\n        \"r0mpiballe\",\n        \"rand1\",\n        \"randi\",\n        \"rape\",\n        \"recch10ne\",\n        \"recch1one\",\n        \"recchi0ne\",\n        \"recchione\",\n        \"retard\",\n        \"romp1ba11e\",\n        \"romp1ba1le\",\n        \"romp1bal1e\",\n        \"romp1balle\",\n        \"rompiba11e\",\n        \"rompiba1le\",\n        \"rompibal1e\",\n        \"rompiballe\",\n        \"ruff1an0\",\n        \"ruff1ano\",\n        \"ruffian0\",\n        \"ruffiano\",\n        \"s1ut\",\n        \"sa10pe\",\n        \"sa1aud\",\n        \"sa1ope\",\n        \"sacanagem\",\n        \"sal0pe\",\n        \"salaud\",\n        \"salope\",\n        \"saugnapf\",\n        \"sb0rr0ne\",\n        \"sb0rra\",\n        \"sb0rrone\",\n        \"sbattere\",\n        \"sbatters1\",\n        \"sbattersi\",\n        \"sborr0ne\",\n        \"sborra\",\n        \"sborrone\",\n        \"sc0pare\",\n        \"sc0pata\",\n        \"sch1ampe\",\n        \"sche1se\",\n        \"sche1sse\",\n        \"scheise\",\n        \"scheisse\",\n        \"schlampe\",\n        \"schwachs1nn1g\",\n        \"schwachs1nnig\",\n        \"schwachsinn1g\",\n        \"schwachsinnig\",\n        \"schwanz\",\n        \"scopare\",\n        \"scopata\",\n        \"sexy\",\n        \"sh1t\",\n        \"shit\",\n        \"slut\",\n        \"sp0mp1nare\",\n        \"sp0mpinare\",\n        \"spomp1nare\",\n        \"spompinare\",\n        \"str0nz0\",\n        \"str0nza\",\n        \"str0nzo\",\n        \"stronz0\",\n        \"stronza\",\n        \"stronzo\",\n        \"stup1d\",\n        \"stupid\",\n        \"succh1am1\",\n        \"succh1ami\",\n        \"succhiam1\",\n        \"succhiami\",\n        \"sucker\",\n        \"t0pa\",\n        \"tapette\",\n        \"test1c1e\",\n        \"test1cle\",\n        \"testic1e\",\n        \"testicle\",\n        \"tette\",\n        \"topa\",\n        \"tr01a\",\n        \"tr0ia\",\n        \"tr0mbare\",\n        \"tr1ng1er\",\n        \"tr1ngler\",\n        \"tring1er\",\n        \"tringler\",\n        \"tro1a\",\n        \"troia\",\n        \"trombare\",\n        \"turd\",\n        \"twat\",\n        \"vaffancu10\",\n        \"vaffancu1o\",\n        \"vaffancul0\",\n        \"vaffanculo\",\n        \"vag1na\",\n        \"vagina\",\n        \"verdammt\",\n        \"verga\",\n        \"w1chsen\",\n        \"wank\",\n        \"wichsen\",\n        \"x0ch0ta\",\n        \"x0chota\",\n        \"xana\",\n        \"xoch0ta\",\n        \"xochota\",\n        \"z0cc01a\",\n        \"z0cc0la\",\n        \"z0cco1a\",\n        \"z0ccola\",\n        \"z1z1\",\n        \"z1zi\",\n        \"ziz1\",\n        \"zizi\",\n        \"zocc01a\",\n        \"zocc0la\",\n        \"zocco1a\",\n        \"zoccola\"\n    ])\n};\nclass Sqids {\n    constructor(options){\n        var _a, _b, _c;\n        const alphabet = (_a = options === null || options === void 0 ? void 0 : options.alphabet) !== null && _a !== void 0 ? _a : defaultOptions.alphabet;\n        const minLength = (_b = options === null || options === void 0 ? void 0 : options.minLength) !== null && _b !== void 0 ? _b : defaultOptions.minLength;\n        const blocklist = (_c = options === null || options === void 0 ? void 0 : options.blocklist) !== null && _c !== void 0 ? _c : defaultOptions.blocklist;\n        if (new Blob([\n            alphabet\n        ]).size !== alphabet.length) {\n            throw new Error(\"Alphabet cannot contain multibyte characters\");\n        }\n        const minAlphabetLength = 3;\n        if (alphabet.length < minAlphabetLength) {\n            throw new Error(`Alphabet length must be at least ${minAlphabetLength}`);\n        }\n        if (new Set(alphabet).size !== alphabet.length) {\n            throw new Error(\"Alphabet must contain unique characters\");\n        }\n        const minLengthLimit = 255;\n        if (typeof minLength !== \"number\" || minLength < 0 || minLength > minLengthLimit) {\n            throw new Error(`Minimum length has to be between 0 and ${minLengthLimit}`);\n        }\n        const filteredBlocklist = new Set();\n        const alphabetChars = alphabet.toLowerCase().split(\"\");\n        for (const word of blocklist){\n            if (word.length >= 3) {\n                const wordLowercased = word.toLowerCase();\n                const wordChars = wordLowercased.split(\"\");\n                const intersection = wordChars.filter((c)=>alphabetChars.includes(c));\n                if (intersection.length === wordChars.length) {\n                    filteredBlocklist.add(wordLowercased);\n                }\n            }\n        }\n        this.alphabet = this.shuffle(alphabet);\n        this.minLength = minLength;\n        this.blocklist = filteredBlocklist;\n    }\n    encode(numbers) {\n        if (numbers.length === 0) {\n            return \"\";\n        }\n        const inRangeNumbers = numbers.filter((n)=>n >= 0 && n <= this.maxValue());\n        if (inRangeNumbers.length !== numbers.length) {\n            throw new Error(`Encoding supports numbers between 0 and ${this.maxValue()}`);\n        }\n        return this.encodeNumbers(numbers);\n    }\n    decode(id) {\n        const ret = [];\n        if (id === \"\") {\n            return ret;\n        }\n        const alphabetChars = this.alphabet.split(\"\");\n        for (const c of id.split(\"\")){\n            if (!alphabetChars.includes(c)) {\n                return ret;\n            }\n        }\n        const prefix = id.charAt(0);\n        const offset = this.alphabet.indexOf(prefix);\n        let alphabet = this.alphabet.slice(offset) + this.alphabet.slice(0, offset);\n        alphabet = alphabet.split(\"\").reverse().join(\"\");\n        let slicedId = id.slice(1);\n        while(slicedId.length > 0){\n            const separator = alphabet.slice(0, 1);\n            const chunks = slicedId.split(separator);\n            if (chunks.length > 0) {\n                if (chunks[0] === \"\") {\n                    return ret;\n                }\n                ret.push(this.toNumber(chunks[0], alphabet.slice(1)));\n                if (chunks.length > 1) {\n                    alphabet = this.shuffle(alphabet);\n                }\n            }\n            slicedId = chunks.slice(1).join(separator);\n        }\n        return ret;\n    }\n    encodeNumbers(numbers, increment = 0) {\n        if (increment > this.alphabet.length) {\n            throw new Error(\"Reached max attempts to re-generate the ID\");\n        }\n        let offset = numbers.reduce((a, v, i)=>this.alphabet[v % this.alphabet.length].codePointAt(0) + i + a, numbers.length) % this.alphabet.length;\n        offset = (offset + increment) % this.alphabet.length;\n        let alphabet = this.alphabet.slice(offset) + this.alphabet.slice(0, offset);\n        const prefix = alphabet.charAt(0);\n        alphabet = alphabet.split(\"\").reverse().join(\"\");\n        const ret = [\n            prefix\n        ];\n        for(let i = 0; i !== numbers.length; i++){\n            const num = numbers[i];\n            ret.push(this.toId(num, alphabet.slice(1)));\n            if (i < numbers.length - 1) {\n                ret.push(alphabet.slice(0, 1));\n                alphabet = this.shuffle(alphabet);\n            }\n        }\n        let id = ret.join(\"\");\n        if (this.minLength > id.length) {\n            id += alphabet.slice(0, 1);\n            while(this.minLength - id.length > 0){\n                alphabet = this.shuffle(alphabet);\n                id += alphabet.slice(0, Math.min(this.minLength - id.length, alphabet.length));\n            }\n        }\n        if (this.isBlockedId(id)) {\n            id = this.encodeNumbers(numbers, increment + 1);\n        }\n        return id;\n    }\n    shuffle(alphabet) {\n        const chars = alphabet.split(\"\");\n        for(let i = 0, j = chars.length - 1; j > 0; i++, j--){\n            const r = (i * j + chars[i].codePointAt(0) + chars[j].codePointAt(0)) % chars.length;\n            [chars[i], chars[r]] = [\n                chars[r],\n                chars[i]\n            ];\n        }\n        return chars.join(\"\");\n    }\n    toId(num, alphabet) {\n        const id = [];\n        const chars = alphabet.split(\"\");\n        let result = num;\n        do {\n            id.unshift(chars[result % chars.length]);\n            result = Math.floor(result / chars.length);\n        }while (result > 0);\n        return id.join(\"\");\n    }\n    toNumber(id, alphabet) {\n        const chars = alphabet.split(\"\");\n        return id.split(\"\").reduce((a, v)=>a * chars.length + chars.indexOf(v), 0);\n    }\n    isBlockedId(id) {\n        const lowercaseId = id.toLowerCase();\n        for (const word of this.blocklist){\n            if (word.length <= lowercaseId.length) {\n                if (lowercaseId.length <= 3 || word.length <= 3) {\n                    if (lowercaseId === word) {\n                        return true;\n                    }\n                } else if (/\\d/.test(word)) {\n                    if (lowercaseId.startsWith(word) || lowercaseId.endsWith(word)) {\n                        return true;\n                    }\n                } else if (lowercaseId.includes(word)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    maxValue() {\n        return Number.MAX_SAFE_INTEGER;\n    }\n} //# sourceMappingURL=sqids.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sqids/esm/sqids.js\n");

/***/ })

};
;